import numpy as np
import cv2
import glob
import matplotlib.pyplot as plt
from sklearn import svm
#from sklearn.model_selection import train_test_split
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error as mse
from sklearn.metrics import mean_absolute_error as mae
from sklearn.metrics import root_mean_squared_error

from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler, PolynomialFeatures
from sklearn.linear_model import Ridge
import warnings


# In[3]:


def extract_sift_features(image_path, num_keypoints=15):
    bild = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    bild = cv2.resize(bild, (150, 150))
    hog = cv2.HOGDescriptor()


    descriptors = hog.compute(bild, winStride=(64, 64))
    #descriptors = hog.compute(bild)

    # descriptors = featuers
    #  Typically, for each keypoint, a 16x16 window around the keypoint is divided into a 4x4 grid of cells.
    #  In each cell, an 8-bin histogram of gradient orientations is computed.
    #  Therefore, each keypoint's descriptor has 4 × 4 × 8 = 128 entries

    # print('shape',descriptors.shape)
    if descriptors is None:
        return np.zeros((num_keypoints, 128))
    return descriptors


# In[11]:


X_data, y_data, filename = [], [], []
class_folder = 'Dataset\\faces_02\\part3'
#class_folder = 'Dataset_Metadata\\part1'
for i, img_path in enumerate(glob.glob(class_folder + '\\*.jpg') + glob.glob(class_folder + '\\*.png')):
    # image = cv2.imread(img_path)
    # if image is not None:
    #    print(f'image {j} read sucssesfully!')

    # print(img_path)
    des = extract_sift_features(img_path)
    # lab = int(img_path.split('\\')[-1].split('_')[0])
    lab = img_path.split('\\')[-1]

    X_data.append(des)
    y_data.append(lab)
    # filename.append(img_path.split('\\')[-1])
    # print(img_path.split('\\')[-1].split('_')[0])

# print(filename[0])


# In[12]:


#print('X_data: ',np.array(X_data).shape, '\ny_data: ', np.array(y_data).shape)
#print(y_data[0])

# In[13]:


#X_train, X_test, y_train, y_test = train_test_split(
#    X_data, y_data, test_size=0.2, random_state=42)

X_train, X_test, y_train, y_test = train_test_split(
    X_data, y_data, test_size=0.2, random_state=77)
print('X_data: ',np.array(X_data).shape, '\ny_data: ', np.array(y_data).shape)
print('X_train: ', np.array(X_train).shape, '\ny_train: ', np.array(y_train).shape)


# In[ ]:
# 'C' : [0.1, 0.5, 1, 10, 100]
# 'gamma' : [0.0001, 0.001, 0.1, 1]
# 'kernel': ['rbf' , 'poly', 'sigmoid' , 'linear']
# model = SVR(kernel="linear", gamma=0.001, C=0.1)
# model = SVR(kernel="poly", gamma=0.1, C=0.5)
# model = SVR(kernel="rbf", gamma=1.0, C=1.0)
model = SVR(C=0.77, gamma=0.85, kernel="poly")


y_train2 = [int(x.split('_')[0]) for x in y_train]

model.fit(X_train, y_train2)


# In[ ]:

y_pred = model.predict(X_test)

y_test2 = [int(x.split('_')[0]) for x in y_test]

#error1 = mse(y_test2, y_pred, squared=False)
error1 = root_mean_squared_error(y_test2, y_pred)
error2 = mae(y_test2, y_pred)

print('y_test: ', y_test[:10], '\ny_pred: ', y_pred[:10])
print('Mean_Squared_Error: ', error1)
print('Mean_Absolute_Error: ', error2)
